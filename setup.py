#!/usr/bin/env python3
import os
import sys
from getpass import getpass

def get_default_model(provider):
    """Return the default model name for each AI provider."""
    defaults = {
        "openai": "gpt-4",
        "anthropic": "claude-3-opus",
        "google": "gemini-pro",
        "deepseek": "deepseek-chat"
    }
    return defaults.get(provider, "")

def create_env_file():
    """Create a user.env file by prompting for values."""
    print("Setting up your environment variables...")
    
    # Check if file already exists
    if os.path.exists("user.env"):
        overwrite = input("user.env already exists. Overwrite? (y/n): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Dictionary to store all environment variables
    env_vars = {}
    
    # Messaging Platform Tokens
    print("\n=== Messaging Platform Configuration ===")
    platform = input("Which platform(s) will you use? (telegram/whatsapp/both) [both]: ").lower() or "both"
    env_vars["PLATFORM"] = platform
    
    if platform in ["telegram", "both"]:
        env_vars["TELEGRAM_BOT_TOKEN"] = input("Enter your Telegram Bot Token: ")
    
    if platform in ["whatsapp", "both"]:
        env_vars["TWILIO_ACCOUNT_SID"] = input("Enter your Twilio Account SID: ")
        env_vars["TWILIO_AUTH_TOKEN"] = getpass("Enter your Twilio Auth Token: ")
        env_vars["TWILIO_PHONE_NUMBER"] = input("Enter your Twilio WhatsApp number (e.g., +14155238886): ")
    
    # Google Sheets Configuration
    print("\n=== Google Sheets Configuration ===")
    env_vars["SPREADSHEET_ID"] = input("Enter your Google Spreadsheet ID: ")
    env_vars["SHEET_NAME"] = input("Enter your Sheet name [Sheet1]: ") or "Sheet1"
    
    # Server Configuration
    print("\n=== Server Configuration ===")
    env_vars["PORT"] = input("Enter server port [5000]: ") or "5000"
    env_vars["HOST"] = input("Enter server host [0.0.0.0]: ") or "0.0.0.0"
    env_vars["DEBUG_MODE"] = input("Enable debug mode? (True/False) [True]: ") or "True"
    
    # AI Configuration
    print("\n=== AI Configuration ===")
    while True:
        provider = input("Choose AI provider (openai/anthropic/google/deepseek) [openai]: ").lower() or "openai"
        if provider in ["openai", "anthropic", "google", "deepseek"]:
            break
        print("Invalid provider. Please choose from the available options.")
    
    env_vars["AI_PROVIDER"] = provider
    env_vars["AI_API_KEY"] = getpass(f"Enter your {provider.title()} API key: ")
    
    default_model = get_default_model(provider)
    env_vars["AI_MODEL"] = input(f"Enter model name [{default_model}]: ") or default_model
    
    # Optional AI settings
    env_vars["AI_TEMPERATURE"] = input("Enter AI temperature (0.0 to 1.0) [0.3]: ") or "0.3"
    env_vars["AI_MAX_TOKENS"] = input("Enter maximum tokens for AI response [150]: ") or "150"
    
    # Security
    print("\n=== Security Configuration ===")
    enable_auth = input("Enable user authentication? (True/False) [False]: ").lower() or "False"
    env_vars["ENABLE_AUTH"] = enable_auth
    
    if enable_auth.lower() == "true":
        users = input("Enter comma-separated list of authorized users: ")
        env_vars["AUTHORIZED_USERS"] = users
    
    # Logging
    print("\n=== Logging Configuration ===")
    env_vars["LOG_LEVEL"] = input("Enter log level (DEBUG/INFO/WARNING/ERROR/CRITICAL) [INFO]: ") or "INFO"
    env_vars["LOG_FILE"] = input("Enter log file name [bot.log]: ") or "bot.log"
    
    # Application Settings
    print("\n=== Application Settings ===")
    env_vars["CONFIRMATION_REQUIRED"] = input("Require confirmation before updating sheet? (True/False) [False]: ") or "False"
    env_vars["MAX_RETRIES"] = input("Maximum number of retries for failed operations [3]: ") or "3"
    env_vars["TIMEOUT"] = input("Timeout in seconds for API calls [30]: ") or "30"
    
    # Write to file
    with open("user.env", "w") as f:
        f.write("# Environment variables for ReportsManageBot\n")
        f.write("# Generated by setup.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
    
    print("\nSetup complete! Environment variables saved to user.env")
    print("Remember to keep this file secure and never commit it to version control.")
    
    # Check for sheet_credentials.json
    if not os.path.exists("sheet_credentials.json"):
        print("\nNOTE: You still need to create a sheet_credentials.json file for Google Sheets API.")
        print("Follow these steps:")
        print("1. Go to Google Cloud Console (https://console.cloud.google.com/)")
        print("2. Create a new project or select an existing one")
        print("3. Enable the Google Sheets API")
        print("4. Create a service account and download the JSON key")
        print("5. Rename the downloaded file to 'sheet_credentials.json' and place it in this directory")

if __name__ == "__main__":
    create_env_file() 